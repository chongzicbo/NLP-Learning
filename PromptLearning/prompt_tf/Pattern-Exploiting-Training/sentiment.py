# -*-coding:gbk -*-

"""
# File       : sentiment.py
# Time       ：2023/3/8 15:38
# Author     ：chengbo
# version    ：python 3.8
# Description: 情感分析例子，利用MLM做 Zero-Shot/Few-Shot/Semi-Supervised Learning
"""

import os

os.environ.setdefault("TF_KERAS", "1")
import numpy as np
from bert4keras.backend import keras, K
from bert4keras.layers import Loss, Embedding
from bert4keras.tokenizers import Tokenizer
from bert4keras.models import build_transformer_model, BERT
from bert4keras.optimizers import Adam
from bert4keras.snippets import sequence_padding, DataGenerator
from bert4keras.snippets import open
from keras.layers import Lambda, Dense
import tensorflow as tf

print(tf.config.list_physical_devices('GPU'))
# keras默认是执行图模式，debug困难；使用eager模式方便debug
tf.config.run_functions_eagerly(True)
num_classes = 2
maxlen = 128
batch_size = 32

model_dir = '/home/bocheng/data/pretrain_model/chinese/chinese_wwm_L-12_H-768_A-12'
config_path = os.path.join(model_dir, 'bert_config.json')
checkpoint_path = os.path.join(model_dir, 'bert_model.ckpt')
dict_path = os.path.join(model_dir, 'vocab.txt')


def load_data(filename):
    D = []
    with open(filename, encoding='utf-8') as f:
        for l in f:
            text, label = l.strip().split('\t')
            D.append((text, int(label)))
    return D


data_dir = '/home/bocheng/data/corpus/sentiment'
train_data = load_data(os.path.join(data_dir, 'sentiment.train.data'))
valid_data = load_data(os.path.join(data_dir, 'sentiment.valid.data'))
test_data = load_data(os.path.join(data_dir, 'sentiment.test.data'))

train_frac = 0.01
num_labeled = int(len(train_data) * train_frac)
unlabeled_data = [(t, 2) for t, l in train_data[num_labeled:]]

train_data = train_data[:num_labeled]
train_data = train_data + unlabeled_data

print(train_data[9])

tokenizer = Tokenizer(dict_path, do_lower_case=True)

# 对应的任务描述
prefix = '很满意'
mask_idx = 1
pos_id = tokenizer.token_to_id('很')
neg_id = tokenizer.token_to_id('不')


def random_masking(token_ids):
    """对输入进行随机mask
    """
    rands = np.random.random(len(token_ids))
    source, target = [], []
    for r, t in zip(rands, token_ids):
        if r < 0.15 * 0.8:  # 80%进行mask
            source.append(tokenizer._token_mask_id)
            target.append(t)
        elif r < 0.15 * 0.9:  # 10%不变
            source.append(t)
            target.append(t)
        elif r < 0.15:  # 10%随机替换为另一个token
            source.append(np.random.choice(tokenizer._vocab_size - 1) + 1)
            target.append(t)
        else:
            source.append(t)
            target.append(0)
    return source, target


class data_generator(DataGenerator):
    def __iter__(self, random=False):
        batch_token_ids, batch_segment_ids, batch_output_ids = [], [], []
        for is_end, (text, label) in self.sample(random):
            if label != 2:
                text = prefix + text
            token_ids, segment_ids = tokenizer.encode(text, maxlen=maxlen)
            if random:
                source_ids, target_ids = random_masking(token_ids)
            else:
                source_ids, target_ids = token_ids[:], token_ids[:]
            if label == 0:
                source_ids[mask_idx] = tokenizer._token_mask_id
                target_ids[mask_idx] = neg_id  # target对应的位置替换为 '不'，不满意
            elif label == 1:
                source_ids[mask_idx] = tokenizer._token_mask_id
                target_ids[mask_idx] = pos_id  # target对应的位置替换为 '很' ，很满意
            batch_token_ids.append(source_ids)
            batch_segment_ids.append(segment_ids)
            batch_output_ids.append(target_ids)
            if len(batch_token_ids) == self.batch_size or is_end:
                batch_token_ids = sequence_padding(batch_token_ids)
                batch_segment_ids = sequence_padding(batch_segment_ids)
                batch_output_ids = sequence_padding(batch_output_ids)
                yield [
                    batch_token_ids, batch_segment_ids, batch_output_ids
                ], None
                batch_token_ids, batch_segment_ids, batch_output_ids = [], [], []


class CrossEntropy(Loss):
    def compute_loss(self, inputs, mask):
        y_true, y_pred = inputs  # y_in [batch_size,seq_len],y_pred [batch_size,seq_len,bert_out_embedding_dim]
        y_mask = K.cast(K.not_equal(y_true, 0), K.floatx())
        accuracy = keras.metrics.sparse_categorical_accuracy(y_true, y_pred)  # 计算准确率
        accuracy = K.sum(accuracy * y_mask) / K.sum(y_mask)
        self.add_metric(accuracy, name='accuracy')
        loss = K.sparse_categorical_crossentropy(y_true, y_pred)
        loss = K.sum(loss * y_mask) / K.sum(y_mask)
        return loss


class Evaluator(keras.callbacks.Callback):
    def __init__(self):
        self.best_val_acc = 0.

    def on_epoch_end(self, epoch, logs=None):
        model.save_weights('mlm_model.weights')
        val_acc = evaluate(valid_generator)
        if val_acc > self.best_val_acc:
            self.best_val_acc = val_acc
            model.save_weights('best_model.weights')
        test_acc = evaluate(test_generator)
        print(
            u'val_acc: %.5f, best_val_acc: %.5f, test_acc: %.5f\n' %
            (val_acc, self.best_val_acc, test_acc)
        )


def evaluate(data):
    total, right = 0., 0.
    for x_true, _ in data:
        x_true, y_true = x_true[:2], x_true[2]  # x_true [token_ids,segment_ids],y_true[batch_size,seq_len]
        y_pred = model.predict(x_true) #[batch_size,seq_len,bert_out_embedding_dim]
        y_pred = y_pred[:, mask_idx, [neg_id, pos_id]].argmax(
            axis=1)  # 取出 mask_idx(index为1)的向量中对应索引为neg_id和pos_id的值 [batch_size,1]
        y_true = (y_true[:, mask_idx] == pos_id).astype(int)  # [batch_size,1]
        total += len(y_true)
        right += (y_true == y_pred).sum()
    return right / total


if __name__ == '__main__':
    train_generator = data_generator(train_data, batch_size)
    valid_generator = data_generator(valid_data, batch_size)
    test_generator = data_generator(test_data, batch_size)
    model = build_transformer_model(config_path=config_path, checkpoint_path=checkpoint_path, with_mlm=True)
    y_in = tf.keras.layers.Input(shape=(None,))
    outputs = CrossEntropy(1)([y_in, model.output])
    train_model = tf.keras.models.Model(model.inputs + [y_in], outputs)
    train_model.compile(optimizer=Adam(1e-5))
    train_model.summary()

    evaluator = Evaluator()

    train_model.fit_generator(
        train_generator.forfit(),
        steps_per_epoch=len(train_generator),
        epochs=1000,
        callbacks=[evaluator]
    )

    # for x_true, _ in test_generator:
    #     x_true, y_true = x_true[:2], x_true[2]
    #     print(x_true[0].shape)
    #     print(x_true[1].shape)
    #     print(y_true.shape)
    #     break
